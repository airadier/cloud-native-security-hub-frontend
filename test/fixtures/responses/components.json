[
  {
    "id": "apache",
    "kind": "FalcoRules",
    "vendor": "Apache",
    "name": "Apache",
    "shortDescription": "Falco rules for securing Apache HTTP Server",
    "description": "# Apache Falco Rules\nThe Apache HTTP Server, colloquially called Apache (/əˈpætʃi/ ə-PATCH-ee),\nis free and open-source cross-platform web server software, released under the\nterms of Apache License 2.0. Apache is developed and maintained by an open community\nof developers under the auspices of the Apache Software Foundation.\n\n## Rules\n\n### Unexpected inbound TCP connection apache\n\nDetects inbound traffic to apache using tcp on a port outside of expected set\n\nAllowed inbound ports:\n\n* 80\n* 443\n\n### Unexpected spawned process apache\n\nDetects a process started in a apache container outside of an expected set\n\nAllowed processes:\n* apache2\n* basename\n* grep\n* app-entrypoint.\n* node\n* sleep\n* dirname\n* httpd\n* nami\n* sh\n* tini\n\n### Unexpected file access readwrite for apache\n\nDetects an attempt to access a file readwrite other than below an expected list of directories\n\nAllowed file prefixes for readwrite:\n* /opt\n* /tmp\n* /dev/null\n",
    "keywords": [
      "web"
    ],
    "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Apache_HTTP_server_logo_%282016%29.svg/300px-Apache_HTTP_server_logo_%282016%29.svg.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: apache_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_apache\n  condition: container and container.image contains \"apache\"\n\n# Restricting listening ports to selected set\n\n- list: apache_allowed_inbound_ports_tcp\n  items: [80, 443]\n\n- rule: Unexpected inbound tcp connection apache\n  desc: Detect inbound traffic to apache using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (apache_allowed_inbound_ports_tcp) and app_apache\n  output: Inbound network connection to apache on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: apache_allowed_processes\n  items: [\"apache2\", \"basename\", \"grep\", \"app-entrypoint.\", \"node\", \"sleep\", \"dirname\", \"httpd\", \"nami\", \"sh\", \"tini\"]\n\n- rule: Unexpected spawned process apache\n  desc: Detect a process started in a apache container outside of an expected set\n  condition: spawned_process and not proc.name in (apache_allowed_processes) and app_apache\n  output: Unexpected process spawned in apache container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: apache_allowed_file_prefixes_readwrite\n  items: [\"/opt\", \"/tmp\", \"/dev/null\"]\n\n- rule: Unexpected file access readwrite for apache\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (apache_allowed_file_prefixes_readwrite) and app_apache\n  output: Unexpected file accessed readwrite for apache (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  },
  {
    "id": "consul",
    "kind": "FalcoRules",
    "vendor": "Consul",
    "name": "Consul",
    "shortDescription": "",
    "description": "# Consul Falco Rules\n\nConsul is a service networking solution to connect and secure services across any runtime platform and public or private cloud\n\n## Rules\n\n### Unexpected inbound tcp connection consul\n\nDetects inbound network connections to consul on unexpected ports\n\n### Unexpected spawned process consul\n\nDetects an unexpected process spawned in the consul container\n\n### Unexpected system calls in consul container\n\nDetects an unexpected system call executed in consul container\n",
    "keywords": [
      "consul"
    ],
    "icon": "https://s3.amazonaws.com/hashicorp-marketing-web-assets/brand/Consul_PrimaryLogo_FullColor.BkqqyRBpl.svg",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: consul_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name contains \"consul\"\n- macro: app_consul\n  condition: container and container.image contains \"consul\"\n\n# Restricting listening ports to selected set\n\n- list: consul_allowed_inbound_ports_tcp\n  items: [8300, 8301, 8302, 8500, 8600]\n\n- rule: Unexpected inbound tcp connection consul\n  desc: Detect inbound traffic to consul using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (consul_allowed_inbound_ports_tcp) and app_consul\n  output: Inbound network connection to consul on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: consul_allowed_processes\n  items: [\"/bin/consul\", \"/bin/sh\", \"/proc/self/exe\", \"awk\", \"consul\", \"ping\", \"seq\", \"sleep\"]\n\n- rule: Unexpected spawned process consul\n  desc: Detect a process started in a consul container outside of an expected set\n  condition: spawned_process and not proc.name in (consul_allowed_processes) and app_consul\n  output: Unexpected process spawned in consul container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: consul_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/var/lib/consul\"]\n\n- rule: Unexpected file access readwrite for consul\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (consul_allowed_file_prefixes_readwrite) and app_consul\n  output: Unexpected file accessed readwrite for consul (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: consul_allowed_syscalls\n  items: [accept, bind, clone, connect, dup, execve, fork, listen, mkdirat, open, openat, pipe, procexit, recvfrom, recvmsg, sendto, socket, unlinkat]\n\n- rule: Unexpected syscall consul\n  desc: Detect a syscall in a consul container outside of an expected set\n  condition: consul_consider_syscalls and not evt.type in (\"\u003cunknown\u003e\", consul_allowed_syscalls) and app_consul\n  output: Unexpected syscall in consul container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"
      }
    ]
  },
  {
    "id": "elasticsearch",
    "kind": "FalcoRules",
    "vendor": "ElasticSearch",
    "name": "ElasticSearch",
    "shortDescription": "",
    "description": "# ElasticSearch Falco Rules\nElasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.\n\n## Rules\n\n### Unexpected inbound tcp connection elasticsearch\n\nDetects inbound network connections to elasticsearch on unexpected ports\n\n### Unexpected spawned process elasticsearch\n\nDetects an unexpected process spawned in the elasticsearch container\n\n### Unexpected file access readwrite for elasticsearch\n\nDetects an unexpected file accessed in readwrite mode for elasticsearch\n",
    "keywords": [
      "database"
    ],
    "icon": "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt05047fdbe3b9c333/5c11ec1f3312ce2e785d9c30/logo-elastic-elasticsearch-lt.svg",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: elasticsearch_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_elasticsearch\n  condition: container and container.image contains \"elasticsearch\"\n\n# Restricting listening ports to selected set\n\n- list: elasticsearch_allowed_inbound_ports_tcp\n  items: [37125, 37385, 40689, 41503, 44173, 9200, 9300]\n\n- rule: Unexpected inbound tcp connection elasticsearch\n  desc: Detect inbound traffic to elasticsearch using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (elasticsearch_allowed_inbound_ports_tcp) and app_elasticsearch\n  output: Inbound network connection to elasticsearch on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: elasticsearch_allowed_processes\n  items: [\"/bin/bash\", \"/bin/sh\", \"/proc/self/exe\", \"/sbin/ldconfig\", \"/usr/lib/jvm/jre-1.8.0-openjdk/bin/java\", \"/usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/controller\", \"chown\", \"controller\", \"cut\", \"dirname\", \"egrep\", \"env\", \"grep\", \"hostname\", \"java\", \"ldconfig\", \"tr\", \"app-entrypoint.\", \"basename\", \"getent\", \"groupadd\", \"nami\", \"node\", \"sysctl\", \"useradd\", \"sleep\", \"elasticsearch\", \"elasticsearch-p\", \"id\", \"ldconfig.real\", \"mktemp\", \"ps\", \"sh\", \"su\", \"tini\"]\n\n- rule: Unexpected spawned process elasticsearch\n  desc: Detect a process started in a elasticsearch container outside of an expected set\n  condition: spawned_process and not proc.name in (elasticsearch_allowed_processes) and app_elasticsearch\n  output: Unexpected process spawned in elasticsearch container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: elasticsearch_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\", \"/usr/share/elasticsearch\", \"/etc\", \"/opt\"]\n\n- rule: Unexpected file access readwrite for elasticsearch\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (elasticsearch_allowed_file_prefixes_readwrite) and app_elasticsearch\n  output: Unexpected file accessed readwrite for elasticsearch (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  },
  {
    "id": "etcd",
    "kind": "FalcoRules",
    "vendor": "etcd",
    "name": "etcd",
    "shortDescription": "",
    "description": "# etcd Falco Rules\n\nA distributed, reliable key-value store for the most critical data of a distributed system\n\n## Rules\n\n### Unauthorized process opened an outbund connection\n\nDetects if an unauthorized process is trying to open an outbound connection\n\n### Unauthorized inbound tcp connection etcd\n\nDetects inbound network connections to etcd on unexpected ports\n\n### Unexpected spawned process etcd\n\nDetects an unexpected process spawned in the etcd container\n\n### Unexpected file read or written by etcd\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\n### Unexpected system calls in etcd container\n\nDetects an unexpected system call executed in etcd container\n",
    "keywords": [
      "database"
    ],
    "icon": "https://raw.githubusercontent.com/cncf/artwork/master/projects/etcd/horizontal/color/etcd-horizontal-color.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: etcd_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_etcd\n  condition: container and container.image contains \"k8s_etcd\"\n\n# Not considering all inbound networking suspect\n\n- list: etcd_outbound_processes\n  items:\n  - etcd\n\n- rule: Unauthorized process opened an outbound connection (etcd)\n  desc: A etcd process tried to open an outbound connection and is not whitelisted\n  condition: outbound and not proc.name in (etcd_outbound_processes) and app_etcd\n  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline\n    connection=%fd.name)\n  priority: WARNING\n\n# Restricting listening ports to selected set\n\n- list: etcd_allowed_inbound_ports_tcp\n  items: [2380, 4001, 7001]\n\n- rule: Unexpected inbound tcp connection etcd\n  desc: Detect inbound traffic to etcd using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (etcd_allowed_inbound_ports_tcp) and app_etcd\n  output: Inbound network connection to etcd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: etcd_allowed_processes\n  items: [\"/usr/local/bin/etcd\"]\n\n- rule: Unexpected spawned process etcd\n  desc: Detect a process started in a etcd container outside of an expected set\n  condition: spawned_process and not proc.name in (etcd_allowed_processes) and app_etcd\n  output: Unexpected process spawned in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: etcd_allowed_file_prefixes_readonly\n  items: [\"/proc/self\", \"/var/etcd/data/member\"]\n\n- rule: Unexpected file access readonly for etcd\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (etcd_allowed_file_prefixes_readonly) and app_etcd\n  output: Unexpected file accessed readonly for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: etcd_allowed_file_prefixes_readwrite\n  items: [\"/var/etcd/data/member\"]\n\n- rule: Unexpected file access readwrite for etcd\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (etcd_allowed_file_prefixes_readwrite) and app_etcd\n  output: Unexpected file accessed readwrite for etcd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: etcd_allowed_syscalls\n  items: [accept, openat, renameat, unlinkat]\n\n- rule: Unexpected syscall etcd\n  desc: Detect a syscall in a etcd container outside of an expected set\n  condition: etcd_consider_syscalls and not evt.type in (\"\u003cunknown\u003e\", etcd_allowed_syscalls) and app_etcd\n  output: Unexpected syscall in etcd container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"
      }
    ]
  },
  {
    "id": "fluentd",
    "kind": "FalcoRules",
    "vendor": "FluentD",
    "name": "FluentD",
    "shortDescription": "",
    "description": "# FluentD Falco Rules\n\nA distributed, reliable key-value store for the most critical data of a distributed system\n\n## Rules\n\n### Unauthorized inbound tcp connection fluentd\n\nDetects inbound network connections to fluentd on unexpected ports\n\n### Unexpected spawned process fluentd\n\nDetects an unexpected process spawned in the fluentd container\n\n### Unexpected file read or written by fluentd\n\nDetects an attempt to access a file readonly other than below an expected list of paths\n",
    "keywords": [
      "logging"
    ],
    "icon": "https://raw.githubusercontent.com/fluent/fluentd-docs/master/public/logo/Fluentd_square.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: fluentd_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_fluentd\n  condition: container and container.image contains \"fluentd\"\n\n# Restricting listening ports to selected set\n\n- list: fluentd_allowed_inbound_ports_tcp\n  items: [31337]\n\n- rule: Unexpected inbound tcp connection fluentd\n  desc: Detect inbound traffic to fluentd using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (fluentd_allowed_inbound_ports_tcp) and app_fluentd\n  output: Inbound network connection to fluentd on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: fluentd_allowed_processes\n  items: [\"/bin/sh\", \"/proc/self/exe\", \"/usr/bin/ruby2.1\", \"date\", \"expr\", \"fluentd\", \"grep\", \"run.sh\", \"sed\", \"stat\"]\n\n- rule: Unexpected spawned process fluentd\n  desc: Detect a process started in a fluentd container outside of an expected set\n  condition: spawned_process and not proc.name in (fluentd_allowed_processes) and app_fluentd\n  output: Unexpected process spawned in fluentd container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: fluentd_allowed_file_prefixes_readwrite\n  items: [\"/var/log\"]\n\n- rule: Unexpected file access readwrite for fluentd\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (fluentd_allowed_file_prefixes_readwrite) and app_fluentd\n  output: Unexpected file accessed readwrite for fluentd (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  },
  {
    "id": "haproxy",
    "kind": "FalcoRules",
    "vendor": "HAProxy",
    "name": "HAProxy",
    "shortDescription": "",
    "description": "# HAProxy Falco Rules\n\nHAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world's most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms.\n\n## Rules\n\n### Unauthorized inbound tcp connection haproxy\n\nDetects inbound network connections to haproxy on unexpected ports\n\n### Unexpected spawned process haproxy\n\nDetects an unexpected process spawned in the haproxy container\n\n### Unexpected file read or written by haproxy\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n",
    "keywords": [
      "loadbalancer"
    ],
    "icon": "https://www.cncf.io/wp-content/uploads/2018/04/HAProxy-logo.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: haproxy_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_haproxy\n  condition: container and container.image contains \"haproxy\"\n\n# Restricting listening ports to selected set\n\n- list: haproxy_allowed_inbound_ports_tcp\n  items: [80, 443, 1936]\n\n- rule: Unexpected inbound tcp connection haproxy\n  desc: Detect inbound traffic to haproxy using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (haproxy_allowed_inbound_ports_tcp) and app_haproxy\n  output: Inbound network connection to haproxy on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: haproxy_allowed_processes\n  items: [\"haproxy\"]\n\n- rule: Unexpected spawned process haproxy\n  desc: Detect a process started in a haproxy container outside of an expected set\n  condition: spawned_process and not proc.name in (haproxy_allowed_processes) and app_haproxy\n  output: Unexpected process spawned in haproxy container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: haproxy_allowed_file_prefixes_readonly\n  items: [\"/etc\", \"/lib/x86_64-linux-gnu\", \"/proc/sys/kernel\", \"/sys/devices/system/cpu\", \"/usr/lib/x86_64-linux-gnu\"]\n\n- rule: Unexpected file access readonly for haproxy\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (haproxy_allowed_file_prefixes_readonly) and app_haproxy\n  output: Unexpected file accessed readonly for haproxy (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: haproxy_allowed_file_prefixes_readwrite\n  items: [\"/var/log/haproxy\", \"/var/run\"]\n# Remember to add your haproxy cache path\n\n- rule: Unexpected file access readwrite for haproxy\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (haproxy_allowed_file_prefixes_readwrite) and app_haproxy\n  output: Unexpected file accessed readwrite for haproxy (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  },
  {
    "id": "mongodb",
    "kind": "FalcoRules",
    "vendor": "Mongo",
    "name": "MongoDB",
    "shortDescription": "",
    "description": "# MongoDB Falco Rules\nMongoDB is a free and open-source cross-platform document-oriented database program.\nClassified as a NoSQL database program, MongoDB uses JSON-like documents with schemas.\nMongoDB is developed by MongoDB Inc., and is published under a combination of the GNU\nAffero General Public License and the Apache\n\n## Rules\n\n### Unexpected inbound tcp connection mongo\n\nDetects an inbound network connection to mongo on an unexpected port\n\n### Unexpected spawned process mongo\n\nDetects an unexpected process spawned in the mongo container\n\n### Unexpected file access readwrite for mongo\n\nDetects an unexpected file accessed in readwrite mode for mongo\n",
    "keywords": [
      "database"
    ],
    "icon": "https://upload.wikimedia.org/wikipedia/en/thumb/4/45/MongoDB-Logo.svg/2560px-MongoDB-Logo.svg.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: mongo_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_mongo\n  condition: container and container.image contains \"mongo\"\n\n# Restricting listening ports to selected set\n\n- list: mongo_allowed_inbound_ports_tcp\n  items: [27017]\n\n- rule: Unexpected inbound tcp connection mongo\n  desc: Detect inbound traffic to mongo using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (mongo_allowed_inbound_ports_tcp) and app_mongo and fd.sockfamily = ip\n  output: Inbound network connection to mongo on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: mongo_allowed_processes\n  items: [\"mongod\", \"mongo\", \"ftdc\", \"WTCheck.tThread\" ,\"app-entrypoint.\", \"basename\", \"dirname\", \"getent\", \"gosu\", \"grep\", \"groupadd\", \"nami\", \"node\", \"run.sh\", \"sed\", \"sh\", \"sleep\", \"tini\", \"useradd\", \"which\"]\n\n- rule: Unexpected spawned process mongo\n  desc: Detect a process started in a mongo container outside of an expected set\n  condition: spawned_process and not proc.name in (mongo_allowed_processes) and app_mongo\n  output: Unexpected process spawned in mongo container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: mongo_allowed_file_prefixes_readwrite\n  items: [\"/data/db\", \"/etc\", \"/opt\", \"/tmp\", \"/root/.nami\"]\n\n- rule: Unexpected file access readwrite for mongo\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (mongo_allowed_file_prefixes_readwrite) and app_mongo\n  output: Unexpected file accessed readwrite for mongo (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE"
      }
    ]
  },
  {
    "id": "nginx",
    "kind": "FalcoRules",
    "vendor": "Nginx",
    "name": "Nginx",
    "shortDescription": "",
    "description": "# Nginx Falco Rules\n\nNginx is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache.\n\n## Rules\n\n### Unauthorized process opened an outbund connection\n\nDetects if an unauthorized process is trying to open an outbound connection\n\n### Unauthorized inbound tcp connection nginx\n\nDetects inbound network connections to nginx on unexpected ports\n\n### Unexpected spawned process nginx\n\nDetects an unexpected process spawned in the nginx container\n\n### Unexpected file read or written by nginx\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\n### Unexpected system calls in nginx container\n\nDetects an unexpected system call executed in nginx container\n",
    "keywords": [
      "web",
      "loadbalancer"
    ],
    "icon": "https://www.nginx.com/wp-content/themes/nginx-theme/assets/img/logo.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: nginx_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_nginx\n  condition: container and container.image contains \"nginx\"\n\n# Any outbound traffic raises a WARNING\n\n- rule: Unauthorized process opened an outbound connection (nginx)\n  desc: A nginx process tried to open an outbound connection and is not whitelisted\n  condition: outbound and evt.rawres \u003e= 0 and app_nginx\n  output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline\n    connection=%fd.name)\n  priority: WARNING\n\n\n# Restricting listening ports to selected set\n\n- list: nginx_allowed_inbound_ports_tcp\n  items: [80, 443, 8080, 8443]\n\n- rule: Unexpected inbound tcp connection nginx\n  desc: Detect inbound traffic to nginx using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (nginx_allowed_inbound_ports_tcp) and app_nginx\n  output: Inbound network connection to nginx on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: nginx_allowed_processes\n  items: [\"nginx\", \"app-entrypoint.\", \"basename\", \"dirname\", \"grep\", \"nami\", \"node\", \"tini\"]\n\n- rule: Unexpected spawned process nginx\n  desc: Detect a process started in a nginx container outside of an expected set\n  condition: spawned_process and not proc.name in (nginx_allowed_processes) and app_nginx\n  output: Unexpected process spawned in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: nginx_allowed_file_prefixes_readwrite\n  items: [\"/var/log/nginx\", \"/var/run\"]\n# Remember to add your nginx cache path\n\n- rule: Unexpected file access readwrite for nginx\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (nginx_allowed_file_prefixes_readwrite) and app_nginx\n  output: Unexpected file accessed readwrite for nginx (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: nginx_allowed_syscalls\n  items: [accept, bind, clone, connect, dup, listen, mkdir, open, recvfrom, recvmsg, sendto, setgid, setuid, socket, socketpair]\n\n- rule: Unexpected syscall nginx\n  desc: Detect a syscall in a nginx container outside of an expected set\n  condition: nginx_consider_syscalls and not evt.type in (\"\u003cunknown\u003e\", nginx_allowed_syscalls) and app_nginx\n  output: Unexpected syscall in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"
      }
    ]
  },
  {
    "id": "postgresql",
    "kind": "FalcoRules",
    "vendor": "PostgreSQL",
    "name": "PostgreSQL",
    "shortDescription": "",
    "description": "# PostgreSQL Falco Rules\n\n## Rules\n\n### Unexpected inbound tcp connection postgres\n\nDetects inbound network connections to postgres on unexpected ports\n\n### Unexpected spawned process postgres\n\nDetects an unexpected process spawned in the postgres container\n\n### Unexpected file read or written by postgres\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n",
    "keywords": [
      "database"
    ],
    "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/540px-Postgresql_elephant.svg.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: postgres_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_postgres\n  condition: container and container.image contains \"postgres\"\n\n- list: postgres_allowed_inbound_ports_tcp\n  items: [5432]\n\n- rule: Unexpected inbound tcp connection postgres\n  desc: Detect inbound traffic to postgres using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (postgres_allowed_inbound_ports_tcp) and app_postgres\n  output: Inbound network connection to postgres on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: postgres_allowed_processes\n  items: [\"/proc/self/exe\", \"pg_isready\", \"postgres\", \"psql\", \"postgres: autovacuum launcher process\", \"pg_ctl\" , \"postgres: checkpointer process   \", \"postgres: stats collector process   \", \"postgres: wal writer process   \", \"postgres: writer process   \", \"sh\"]\n\n- rule: Unexpected spawned process postgres\n  desc: Detect a process started in a postgres container outside of an expected set\n  condition: spawned_process and not proc.name in (postgres_allowed_processes) and app_postgres\n  output: Unexpected process spawned in postgres container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: postgres_allowed_file_prefixes_readonly\n  items: [\"/dev\", \"/etc\", \"/lib/x86_64-linux-gnu\", \"/usr/lib/locale\", \"/usr/lib/x86_64-linux-gnu\", \"/usr/share/locale\", \"/var/lib/postgresql/data\", \"/usr/share/zoneinfo\", \"/var/lib/postgresql\", \"/usr/lib/postgresql\", \"/usr/share/postgresql\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readonly for postgres\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (postgres_allowed_file_prefixes_readonly) and app_postgres\n  output: Unexpected file accessed readonly for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: postgres_allowed_file_prefixes_readwrite\n  items: [\"/var/lib/postgresql/data\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readwrite for postgres\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (postgres_allowed_file_prefixes_readwrite) and app_postgres\n  output: Unexpected file accessed readwrite for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  },
  {
    "id": "redis",
    "kind": "FalcoRules",
    "vendor": "Redis",
    "name": "Redis",
    "shortDescription": "",
    "description": "# Redis Falco Rules\n\n## Rules\n\n### Unexpected inbound tcp connection redis\n\nDetects inbound network connections to redis on unexpected ports\n\n### Unexpected spawned process redis\n\nDetects an unexpected process spawned in the redis container\n\n### Unexpected file read or written by redis\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n",
    "keywords": [
      "database"
    ],
    "icon": "https://upload.wikimedia.org/wikipedia/en/thumb/6/6b/Redis_Logo.svg/2880px-Redis_Logo.svg.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: postgres_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_postgres\n  condition: container and container.image contains \"postgres\"\n\n- list: postgres_allowed_inbound_ports_tcp\n  items: [5432]\n\n- rule: Unexpected inbound tcp connection postgres\n  desc: Detect inbound traffic to postgres using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (postgres_allowed_inbound_ports_tcp) and app_postgres\n  output: Inbound network connection to postgres on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: postgres_allowed_processes\n  items: [\"/proc/self/exe\", \"pg_isready\", \"postgres\", \"psql\", \"postgres: autovacuum launcher process\", \"pg_ctl\" , \"postgres: checkpointer process   \", \"postgres: stats collector process   \", \"postgres: wal writer process   \", \"postgres: writer process   \", \"sh\"]\n\n- rule: Unexpected spawned process postgres\n  desc: Detect a process started in a postgres container outside of an expected set\n  condition: spawned_process and not proc.name in (postgres_allowed_processes) and app_postgres\n  output: Unexpected process spawned in postgres container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: postgres_allowed_file_prefixes_readonly\n  items: [\"/dev\", \"/etc\", \"/lib/x86_64-linux-gnu\", \"/usr/lib/locale\", \"/usr/lib/x86_64-linux-gnu\", \"/usr/share/locale\", \"/var/lib/postgresql/data\", \"/usr/share/zoneinfo\", \"/var/lib/postgresql\", \"/usr/lib/postgresql\", \"/usr/share/postgresql\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readonly for postgres\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (postgres_allowed_file_prefixes_readonly) and app_postgres\n  output: Unexpected file accessed readonly for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: postgres_allowed_file_prefixes_readwrite\n  items: [\"/var/lib/postgresql/data\", \"/var/run/postgresql\"]\n\n- rule: Unexpected file access readwrite for postgres\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (postgres_allowed_file_prefixes_readwrite) and app_postgres\n  output: Unexpected file accessed readwrite for postgres (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  },
  {
    "id": "rook",
    "kind": "FalcoRules",
    "vendor": "Rook",
    "name": "Rook",
    "shortDescription": "",
    "description": "# Rook Falco Rules\n\nRook turns distributed storage systems into self-managing, self-scaling, self-healing storage services. It automates the tasks of a storage administrator: deployment, bootstrapping, configuration, provisioning, scaling, upgrading, migration, disaster recovery, monitoring, and resource management.\n\n## Rules\n\n### Unexpected spawned process Rook\n\nDetects an unexpected process spawned in the rook container\n\n### Unexpected file read or written by Rook\n\nDetects an attempt to access a file readonly other than below an espected list of paths\n\n### Unexpected system calls in Rook container\n\nDetects an unexpected system call executed in rook container\n",
    "keywords": [
      "storage"
    ],
    "icon": "https://www.pngfind.com/pngs/m/581-5811204_rook-kubernetes-logo-hd-png-download.png",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: rook_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n# These policies are limited to containers, specifically those where\n# the container image name starts with \"rook\"\n- macro: app_rook\n  condition: container and container.image contains \"rook\"\n\n# Not considering all inbound networking suspect\n\n# Not considering all outbound networking suspect\n\n# Restricting listening ports to selected set\n\n\n# Restricting spawned processes to selected set\n\n- list: rook_allowed_processes\n  items: [\"/bin/sh\", \"/sbin/ldconfig.real\", \"/tini\", \"/usr/bin/python2.7\", \"/usr/local/bin/rook\", \"ceph\", \"ldconfig\", \"ldconfig.real\", \"rook\"]\n\n- rule: Unexpected spawned process rook\n  desc: Detect a process started in a rook container outside of an expected set\n  condition: spawned_process and not proc.name in (rook_allowed_processes) and app_rook\n  output: Unexpected process spawned in rook container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting files read or written to specific set\n\n- list: rook_allowed_file_prefixes_readonly\n  items: [\"/\"]\n\n- rule: Unexpected file access readonly for rook\n  desc: Detect an attempt to access a file readonly other than below an expected list of directories\n  condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (rook_allowed_file_prefixes_readonly) and app_rook\n  output: Unexpected file accessed readonly for rook (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n- list: rook_allowed_file_prefixes_readwrite\n  items: [\"/dev\", \"/tmp\"]\n\n- rule: Unexpected file access readwrite for rook\n  desc: Detect an attempt to access a file readwrite other than below an expected list of directories\n  condition: (open_write) and not fd.name pmatch (rook_allowed_file_prefixes_readwrite) and app_rook\n  output: Unexpected file accessed readwrite for rook (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting syscalls to selected set\n\n- list: rook_allowed_syscalls\n  items: [clone, connect, dup, execve, getegid, geteuid, getgid, getrlimit, getuid, open, openat, pipe, procexit, sendmsg, socket, unlinkat]\n\n- rule: Unexpected syscall rook\n  desc: Detect a syscall in a rook container outside of an expected set\n  condition: rook_consider_syscalls and not evt.type in (\"\u003cunknown\u003e\", rook_allowed_syscalls) and app_rook\n  output: Unexpected syscall in rook container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)\n  priority: NOTICE\n  warn_evttypes: False\n"
      }
    ]
  },
  {
    "id": "traefik",
    "kind": "FalcoRules",
    "vendor": "Traefik",
    "name": "Traefik",
    "shortDescription": "",
    "description": "# Traefik Falco Rules\n\nA reverse proxy / load balancer that's easy, dynamic, automatic, fast, full-featured, open source, production proven, provides metrics, and integrates with every major cluster technology... No wonder it's so popular!\n\n## Rules\n\n### Unauthorized inbound tcp connection etcd\n\nDetects inbound network connections to etcd on unexpected ports\n\n### Unexpected spawned process etcd\n\nDetects an unexpected process spawned in the etcd container\n",
    "keywords": [
      "loadbalancer"
    ],
    "icon": "https://d33wubrfki0l68.cloudfront.net/1b8ea408142c253bb8e16596218e4e328d019c58/862c3/assets/img/traefik.logo.bright@3x.svg",
    "website": "",
    "maintainers": [
      {
        "name": "nestorsalceda",
        "link": "github.com/nestorsalceda"
      },
      {
        "name": "fedebarcelona",
        "link": "github.com/tembleking"
      }
    ],
    "rules": [
      {
        "raw": "- macro: traefik_consider_syscalls\n  condition: (evt.num \u003c 0)\n\n- macro: app_traefik\n  condition: container and container.image startswith \"traefik\"\n\n# Restricting listening ports to selected set\n\n- list: traefik_allowed_inbound_ports_tcp\n  items: [443, 80, 8080]\n\n- rule: Unexpected inbound tcp connection traefik\n  desc: Detect inbound traffic to traefik using tcp on a port outside of expected set\n  condition: inbound and evt.rawres \u003e= 0 and not fd.sport in (traefik_allowed_inbound_ports_tcp) and app_traefik\n  output: Inbound network connection to traefik on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n\n# Restricting spawned processes to selected set\n\n- list: traefik_allowed_processes\n  items: [\"traefik\"]\n\n- rule: Unexpected spawned process traefik\n  desc: Detect a process started in a traefik container outside of an expected set\n  condition: spawned_process and not proc.name in (traefik_allowed_processes) and app_traefik\n  output: Unexpected process spawned in traefik container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)\n  priority: NOTICE\n"
      }
    ]
  }
]
